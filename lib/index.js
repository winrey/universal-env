"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Envs = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const dotenv_1 = (0, tslib_1.__importDefault)(require("dotenv"));
const DEFAULT_ENV = "release";
const UNSET_STRING = ["", "undefined"];
const FALSILY_STRING = ["0", "false", "none", "null", "n/a", "[]", "{}", "f", "off"];
const mapIfMatch = (env, map) => {
    env = env.toLowerCase();
    return env in map ? map[env] : (env || DEFAULT_ENV);
};
const isWechatMiniProgram = () => wx && wx.getAccountInfoSync;
const isNodeJS = () => !isWechatMiniProgram() && typeof process !== "undefined" && process && process.env;
/**
 * 获取环境名称
 * @returns develop -> 开发环境  staging -> 体验版/测试环境  release -> 正式环境
 */
const getEnvName = () => {
    if (isWechatMiniProgram()) {
        // MiniProgram
        const { envVersion } = wx.getAccountInfoSync().miniProgram;
        return mapIfMatch(envVersion, {
            "develop": "develop",
            "trial": "staging",
            "release": "release",
        });
    }
    if (isNodeJS()) {
        // node环境
        const nodeEnv = process.env.NODE_ENV || "";
        return mapIfMatch(nodeEnv, {
            "development": "develop",
            "staging": "staging",
            "production": "release",
        });
    }
    console.warn(`[ENV_NAME] This Env is neither MiniProgram Nor NodeJs. Env fallback to "${DEFAULT_ENV}". `);
    return DEFAULT_ENV;
};
/**
 * 获取环境变量
 */
const getEnvVar = (name) => {
    if (typeof process !== "undefined" && process && process.env && process.env[name]) {
        return process.env[name];
    }
    return;
};
class Envs {
    static init({ env, loadDotEnv, folder = "./", envPath } = {}) {
        Envs.nowEnv = env;
        env = this.getNowEnv();
        if (Envs.getLoadDotEnv(loadDotEnv)) {
            Envs.loadDotEnvFile(envPath, folder);
        }
    }
    static getLoadDotEnv(passed) {
        if (passed !== undefined) {
            return passed;
        }
        if (isNodeJS())
            return true;
        return false;
    }
    static loadDotEnvFile(envPath, folder) {
        if (envPath) {
            dotenv_1.default.config({ path: envPath });
            return;
        }
        folder = folder !== null && folder !== void 0 ? folder : process.cwd();
        const env = path_1.default.resolve(folder, `.${this.getNowEnv()}.env`);
        dotenv_1.default.config({ path: env });
        const local = path_1.default.resolve(folder, '.env');
        dotenv_1.default.config({ path: local });
    }
    static getNowEnv() {
        if (Envs.nowEnv)
            return Envs.nowEnv;
        return Envs.nowEnv = getEnvName();
    }
    static register(key, options = {}) {
        var _a, _b;
        if (typeof options === "string") {
            options = { default: options, type: 'string' };
        }
        if (typeof options === "number") {
            options = { default: String(options), type: 'number' };
        }
        if (typeof options === "boolean") {
            options = { default: String(options), type: 'boolean' };
        }
        const { required = true, overwide = true, type = "string" } = options, rest = (0, tslib_1.__rest)(options, ["required", "overwide", "type"]);
        const env = this.getNowEnv();
        if (this.vars.has(key)) {
            console.warn(`DUPLICATE ENVIRONMENT VARIABLE REGISTER: ${key}`);
        }
        const val = (_b = (_a = (overwide ? getEnvVar(key) : undefined)) !== null && _a !== void 0 ? _a : rest[env]) !== null && _b !== void 0 ? _b : rest.default;
        if (required && val === undefined) {
            throw new Error(`ENVIRONMENT VARIABLE REQUIRED: ${key}`);
        }
        this.vars.set(key, val);
        this.types.set(key, type);
    }
    static get(key, defaultVal) {
        switch (this.types.get(key)) {
            case 'string': return this.getByString(key);
            case 'number': return this.getByNumber(key);
            case 'boolean': return this.getByBoolean(key);
            case 'json': return this.getByJSON(key);
        }
        return defaultVal;
    }
    static getByString(key, defaultVal = "") {
        var _a;
        return (_a = this.vars.get(key)) !== null && _a !== void 0 ? _a : defaultVal;
    }
    static getByNumber(key, defaultVal) {
        return Number(this.getByString(key) || defaultVal);
    }
    static getByBoolean(key, defaultVal = false) {
        const str = this.getByString(key).toLowerCase();
        if (UNSET_STRING.includes(str)) {
            return defaultVal;
        }
        if (FALSILY_STRING.includes(str)) {
            return false;
        }
        return true;
    }
    static getByJSON(key, defaultVal = {}) {
        const str = this.getByString(key);
        if (!str) {
            return defaultVal !== null && defaultVal !== void 0 ? defaultVal : {};
        }
        return JSON.parse(str) || defaultVal;
    }
    static getAllByString() {
        const result = {};
        this.vars.forEach((v, k) => result[k] = v);
        return result;
    }
    static getAll() {
        const result = {};
        this.vars.forEach((v, k) => result[k] = this.get(k));
        return result;
    }
}
exports.Envs = Envs;
Envs.vars = new Map();
Envs.types = new Map();
exports.default = Envs;
//# sourceMappingURL=data:application/json;base64,